<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git TIPS]]></title>
    <url>%2F2015%2F10%2F20%2Fgit_tips%2F</url>
    <content type="text"><![CDATA[多个commit合并查看历史版本号列表，然后复制要合并的多个commit的前一个{版本号}1$ git log rebase操作1$ git rebase -i &#123;版本号&#125; 弹出版本修改窗口，从第二行起，将前缀pick更改为s(squash) 修改弹出的commit message窗口，删除多余的message，或者更改message 将合并强制提交，-f(force)表示强制push1$ git push origin &#123;your-branch-name&#125; -f 在MAC环境下，建议安装git log历史查看工具, brew install tig 代码回滚1$ git revert -m [要撤销的那条merge线的编号，从1开始计算] [merge前的版本号] 会创建一个新的的commit来抵消对应的merge操作。1$ git revert [上一次revert撤销merge时提交的commit的版本号] 重新创建一个commit，代码回归到原来的状态。 修改commit信息1234$ git rebase -i HEAD~1(git rebase -i --root针对第一次提交)$ git commit --amend --author=&apos;name &lt;name@163.com&gt;&apos;$ git commit --amend --date=&#123;data -R&#125;$ git rebase --continue HEAD~后的数字代表自顶而下第几次提交]]></content>
  </entry>
  <entry>
    <title><![CDATA[Git工作流协作指引]]></title>
    <url>%2F2015%2F07%2F01%2Fgit-collaboration-guide%2F</url>
    <content type="text"><![CDATA[Forking工作流Fork以后，每个开发者有一个公有远程仓库与一个私有远程仓库。开发者对公有远程仓库没有直接的写权限，只能够推送代码到自己的私有远程仓库，然后向公有远程仓库发起Merge Request请求，等待第三方审计，审计通过后会通过Accept Merge操作，把开发者的私有远程仓库中代码变更合入到公有远程仓库。 Forking工作流的优势是，提供一个分布式的工作流，能为大型、自发性的团队（包括了不受信的第三方）提供灵活的方式来安全的协作，避开了大家都共用中心仓库在某些情况下导致开发进程的阻塞。也让这个工作流成为开源项目的理想工作流。尤其当项目有其他不可信第三方（开源参与者或实习生等）参与开发时要提交代码，必须经过审核后才能合并，提高了项目代码的安全性和稳定性。 1. 维护者创建项目（公共远程仓库）管理员在Git仓库上创建新项目，填写项目名称，设置开发人员等，管理员克隆项目到本地，初始化第一次提交，创建master分支。123456git clone git@github.com:blindspoter/micros.gitcd microstouch readme.mdgit add readme.mdgit commit -m &quot;first commit&quot;git push origin master 管理员创建develop分支12git checkout -b develop mastergit push origin develop 2. 开发者fork项目（私有远程仓库）项目开发者在Git仓库上fork项目作为自己的服务端远程私有仓库【源仓库orign】1git@github.com:yourname/micros.git 开发者将项目克隆至自己的工作电脑（本地仓库）1git clone git@github.com:yourname/micros.git 添加远程公共仓库地址到本地仓库中【上游仓库upstream】1git remote add upstream git@github.com:blindspoter/micros.git 3. 开发者进行功能开发3.1 开发前的准备确认在本地master分支，并拉取上游最新的master代码（第一次使用新功能开发时）12git checkout mastergit pull --rebase upstream master 从master切出新的develop分支1git checkout -b develop 注：因为是第一次用，所以本地仓库还没有develop分支，需创建 3.2 正式的开发本地的develop分支与上游（公共仓库）的develop分支同步12git checkout developgit pull --rebase upstream develop 基于develop切出新的功能分支1git checkout -b feature 一定牢记每次写码前在当前功能分支同步上游develop分支的最新代码12git checkout featuregit pull --rebase upstream develop 3.3 开发完成提交代码切到已开发完成的功能分支1git checkout feature 同步公共仓库的develop分支最新代码，有冲突的话解决冲突1git pull --rebase upstream develop 推送本地的功能分支到远程私有仓库1git push origin feature 3.4 开发完成提交代码提交MR（Merge Request）到公共仓库的develop分支打开git仓库页面，进入自己的私有仓库，点击+Merge Rquest新建MR，注意选择源分支与目的分支:1yourname/feature ---&gt; micros/develop 不论何种用意和目的，feature分支只能跟develop分支合并。 3.5 通知相关人员审计你的代码此时，cooperator，leader，code reviewer可以查看代码变更，提出意见，以及最终Accept Merge到上游仓库的develop分支。 参考文献深入理解学习Git工作流]]></content>
  </entry>
</search>